<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="itemsView1.HtmlTemplate.Styles" xml:space="preserve">
    <value>/* styles.css */
body {
    font-family: 'Open Sans', sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 0;
    color: #2c3e50;
    background: linear-gradient(to right, #f8f9fa, #e9ecef);
}

header {
    background: #6c5ce7;
    color: #fff;
    padding: 1.5rem 0;
    text-align: center;
    font-size: 1.8rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

main {
    max-width: 900px;
    margin: 30px auto;
    background: #fff;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

.recipe-info {
    display: flex;
    gap: 25px;
    margin-bottom: 30px;
}

.image-container img {
    max-width: 100%;
    border-radius: 12px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.recipe-details {
    flex: 1;
}

.recipe-details h2 {
    color: #6c5ce7;
    margin-bottom: 10px;
}

.recipe-details p {
    margin: 8px 0;
    color: #34495e;
}

.recipe-content {
    display: flex;
    gap: 30px;
}

.ingredients,
.instructions {
    flex: 1;
    background: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
}

.ingredients h2,
.instructions h2 {
    color: #6c5ce7;
    margin-bottom: 10px;
    border-bottom: 2px solid #6c5ce7;
    display: inline-block;
    padding-bottom: 5px;
}

.ingredients ul,
.instructions ol {
    margin: 0;
    padding-left: 20px;
    color: #495057;
}

footer {
    text-align: center;
    padding: 15px 0;
    background: #2c3e50;
    color: #fff;
    margin-top: 30px;
    border-radius: 12px;
    font-size: 0.9rem;
    box-shadow: 0 -4px 6px rgba(0, 0, 0, 0.1);
}

@media (max-width: 768px) {
    .recipe-content {
        flex-direction: column;
    }
}
</value>
  </data>
  <data name="itemsView1.HtmlTemplate.Template" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;body&gt;
    
        &lt;div class="recipe-info"&gt;
            &lt;div class="image-container"&gt;
                &lt;img src="recipe-image.jpg" alt="Delicious dish"&gt;
            &lt;/div&gt;
            &lt;div class="recipe-details"&gt;
                &lt;h2&gt;Recipe Name&lt;/h2&gt;
                &lt;p&gt;Preparation Time: 30 mins&lt;/p&gt;
                &lt;p&gt;Cooking Time: 45 mins&lt;/p&gt;
                &lt;p&gt;Servings: 4&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="recipe-content"&gt;
            &lt;div class="ingredients"&gt;
                &lt;h2&gt;Ingredients&lt;/h2&gt;
                &lt;ul&gt;
                    &lt;li&gt;2 cups of flour&lt;/li&gt;
                    &lt;li&gt;1/2 cup of sugar&lt;/li&gt;
                    &lt;li&gt;1 cup of milk&lt;/li&gt;
                    &lt;li&gt;1 tsp of vanilla extract&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
            &lt;div class="instructions"&gt;
                &lt;h2&gt;Instructions&lt;/h2&gt;
                &lt;ol&gt;
                    &lt;li&gt;Preheat the oven to 350°F (175°C).&lt;/li&gt;
                    &lt;li&gt;Mix all the ingredients in a bowl.&lt;/li&gt;
                    &lt;li&gt;Pour the mixture into a greased pan.&lt;/li&gt;
                    &lt;li&gt;Bake for 30-35 minutes or until golden brown.&lt;/li&gt;
                &lt;/ol&gt;
            &lt;/div&gt;
     	&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</value>
  </data>
  <metadata name="RecipePopup.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="recipeModelBindingSource.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>141, 17</value>
  </metadata>
  <data name="htmlContentPopup1.HtmlTemplate.Styles" xml:space="preserve">
    <value>.container {
    padding: 16px;
    display: flex;
    flex-direction: column;
    width: 328px;
}

.item {
    width: 328px;
    height: auto;
    background-color: @Window;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
}

	.item:hover {
		box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);		
	}
	
	body:select .item {
		border-width: 2px;
		border-style: solid;
		border-color: @HighlightAlternate;
	}

.price-label-container {
	height: 32px;
	width: 308px;
	display: flex;
	justify-content: flex-end;
}

.price-label {
	font-family: 'Segoe UI';
	font-weight: bold;
	font-size: 18px;
	padding: 4px 12px;
	background-color: @HighlightAlternate;
	border-radius: 3px;
	color: White;
}

.image-container {
    display: flex;
	flex-direction: column;
	width: 280px;
    height: 172px;
	padding: 16px 24px 24px;    
	
	align-items: flex-start;
	border-radius: 8px 8px 0px 0px;
	background-color: white;
}

.item-image {
    width: 280px;
    height: 124px;
    margin-top: 16px;
    object-fit: contain;
}

.item-block {
    width: 100%;
    background-color: white;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
}

.item-info-outer {
	display: flex;
	flex-direction: column;
	padding: 16px 24px 24px;
	border-radius: 0px 0px 8px 8px;
	background-color: @WindowText/0.05;
	justify-content: space-between;
}

	:root:select .item-info-outer {
		background-color: @HighlightAlternate/0.1;
	}
	
	:root:focus .item-info-outer {
		background-color: @HighlightAlternate/0.1;
	}	

.item-info {
	width: 100%;
    display: flex;
	flex-direction: column;
	align-items: flex-start;
}

.empty-space {
	height: auto;
}

.name {
    font-family: 'Segoe UI';
    font-size: 24px;
    font-weight: bold;
    color: @WindowText;
    margin-bottom: 3px;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
}

.category {
	font-size: 10px;
	font-weight: bold;
	background-color: @WindowText/0.1;
	color: @WindowText;
	padding: 6px 8px 6px 8px;
	border-radius: 2px;
	margin-top: 11px;
}

.specs {
    font-family: 'Segoe UI';
	font-style: normal;
	font-weight: normal;
	font-size: 12px;
	color: @WindowText;
	margin: 1px 0;
}


.center-container {
    width: 100%;
    display: flex;
    justify-content: center;
    margin-top: 30px;
}

.button {
    width: 100%;
    height: auto;
    padding: 12px 0 12px 0;
    margin: 24px 0 0 0;
    border-radius: 6px;
    color: @WindowText;
    background-color: @Window;
            
    text-align: center;
    
    font-family: 'Segoe UI';
    font-weight: bold;
    font-size: 18px;
    
    box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.1);
	user-select:none;
}

	.button:hover {
		background-color: @HighlightAlternate;
		box-shadow: 0px 8px 16px @HighlightAlternate/0.5;
		color: White;
	}
	.button:active {
		color: rgba(255, 255, 255, 0.35);
		box-shadow: initial;
	}

.item-container {
	display: flex;
	width: 320px;
	height: 420px;
}
</value>
  </data>
  <data name="htmlContentPopup1.HtmlTemplate.Template" xml:space="preserve">
    <value>&lt;div class="container"&gt;
	&lt;div class="item"&gt;
		&lt;div class="image-container"&gt;
			&lt;img class="item-image" src="${Image}"/&gt; 
		&lt;/div&gt;
		&lt;div class="item-info-outer"&gt;
			&lt;div class="item-info"&gt;
				&lt;div class="name"&gt;${Name}&lt;/div&gt;
				&lt;div class="specs"&gt;${Model}&lt;/div&gt;
				&lt;div class="specs"&gt;${SpecsField2}, {SpecsField3}&lt;/div&gt;
				&lt;div class="category"&gt;${CategoryNameCaps}&lt;/div&gt;
			&lt;/div&gt;
			&lt;div class="item-info"&gt;
				&lt;div id="detailButton" class="button"&gt;Read More&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;</value>
  </data>
</root>